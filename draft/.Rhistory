qt(0.975, 10000)
qt(0.975, 100)
qt(0.975, 1000)
qnorm(1-0.00101)
qt(1-0.00101, 49)
pt(3.3913, 96.396)
1 -pt(3.3913, 96.396)
qt(0.975, 60)
pt(43.498, 49)
pt(3.3913, 96.396)
x = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
sd(x)
se = sd(x) / sqrt(length(x))
mean(x) / se
qt(0.0975, length(x) - 1)
# CI = mu +- ME
# ME = t_stat * SE
summ_bm %>%
mutate(ci_low = mean - qt(.975, 50 - 1) * se,
ci_high = mean + qt(.975, 50 - 1) * se) %>%
select(Sex, ci_low, ci_high)
?v_line
?vline
# gt and geom_t_fill
# check df
gt(50 - 1) +
geom_vline(xintercept = 3.3913, color = "red", linetype = "dashed", alpha = 0.5) +
geom_t_fill(df = 50 -1, a = 3.3913, b = 10) +
geom_t_fill(df = 50 -1, a = -3.3913, b = -10)
# geom_t_fill(50 -1, a = )
# gt and geom_t_fill
# check df
gt(50 - 1) +
geom_vline(xintercept = 3.3913, color = "red", linetype = "dashed", alpha = 0.5) +
geom_t_fill(df = 50 -1, a = 3.3913) +
geom_t_fill(df = 50 -1, b = --3.3913)
# geom_t_fill(50 -1, a = )
# gt and geom_t_fill
# check df
gt(50 - 1) +
geom_vline(xintercept = 3.3913, color = "red", linetype = "dashed", alpha = 0.5) +
geom_t_fill(df = 50 -1, a = 3.3913) +
geom_t_fill(df = 50 -1, b = -3.3913)
# geom_t_fill(50 -1, a = )
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
data = read_csv("../all_races.csv")
data = read_csv("./all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
head(improvement)
data = read_csv("./all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
head(improvement)
View(data)
sample_chart = data %>%
filter(name == "ulmaa")
ggplot(sample_chart, aes(x = races, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE)
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Race Number") +
ylab("Typing Speed (Words Per Minute)") +
ggtitle("Typing Improvement over Race Number", subtitle = "Racer Ulmaa")
sample_chart = data %>%
filter(name == "ulmaa")
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Race Number") +
ylab("Typing Speed (Words Per Minute)") +
ggtitle("Typing Improvement over Number of Races", subtitle = "Racer Ulmaa")
sample_chart = data %>%
filter(name == "ulmaa")
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Race #") +
ylab("Typing Speed (Words Per Minute)") +
ggtitle("Typing Improvement over Number of Races", subtitle = "Racer Ulmaa")
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Number of Races") +
ylab("Typing Speed (Words Per Minute)") +
ggtitle("Typing Improvement over Number of Races", subtitle = "Racer Ulmaa")
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - game_num * m + b
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0)
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0)
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red", alpha = 0.5)
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red", width = 2)
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red", lineWidth = 2)
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red")
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red")
sample_chart %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red") +
xlab("Number of Races") +
ylab("Residuals (Words Per Minute)") +
ggtitle("Regression Model Residuals for Typing Speed Over Races", subtitle = "Racer Ulmaa")
View(improvement)
imp_sum = improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp)) %>%
mutate(t_stat = (xbar - 0) / (s / sqrt(n)))
imp_sum
t_stat = imp_sum %>% pull(tstat)
imp_sum = improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp)) %>%
mutate(t_stat = (xbar - 0) / (s / sqrt(n)))
imp_sum
t_stat = imp_sum %>% pull(t_stat)
t_stat
View(imp_sum)
View(improvement)
imp_sum = improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp, na.rm = TRUE)) %>%
mutate(t_stat = (xbar - 0) / (s / sqrt(n)))
imp_sum
t_stat = imp_sum %>% pull(t_stat)
t_stat
View(improvement)
sd(improvement$imp)
improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp))
improvement
data = read_csv("./all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(
b = lm(wpm ~ game_num)$coefficients[1],
m = lm(wpm ~ game_num)$coefficients[2]
) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct() %>%
ungroup()
head(improvement)
imp_sum = improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp)) %>%
mutate(t_stat = (xbar - 0) / (s / sqrt(n)))
imp_sum
t_stat = imp_sum %>% pull(t_stat)
t_stat
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1, a = 0, b = 12) +
geom_t_fill(df = imp_sum$n, a = -10, b = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
theme_minimal()
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1, a = 0, b = 12) +
geom_t_fill(df = imp_sum$n, a = -10, b = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
theme_minimal()
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
theme_minimal()
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n, a = t_stat) +
geom_t_fill(df = imp_sum$n, b = -t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("")
theme_minimal()
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_t_fill(df = imp_sum$n - 1, b = -t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("")
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1) * 2)
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_t_fill(df = imp_sum$n - 1, b = -t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("")
theme_minimal()
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("")
theme_minimal()
p_value
p_value
p_value = imp_sum %>% pull(p_value)
p_value
imp_sum = improvement %>%
summarize(n = n(),
xbar = mean(imp),
s = sd(imp)) %>%
mutate(t_stat = (xbar - 0) / (s / sqrt(n)))
imp_sum
t_stat = imp_sum %>% pull(t_stat)
t_stat
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("")
theme_minimal()
specify_decimal(p_value, 100)
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("") +
theme_minimal()
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("Normalized T Distribution with Test Statistic") +
theme_minimal()
imp_sum = imp_sum %>%
mutate(p_value = pt(t_stat, n - 1))
imp_sum
p_value = imp_sum %>% pull(p_value)
p_value
gt(df = imp_sum$n - 1) +
geom_t_fill(df = imp_sum$n - 1, a = t_stat) +
geom_vline(xintercept = t_stat, color = "red", linetype = "dashed") +
xlab("t") +
ylab("Density") +
ggtitle("Normalized T Distribution with Test Statistic",
subtitle="For all racers") +
theme_minimal()
setwd("~/Projects/STAT_240/project/draft")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(kableExtra)
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct() %>%
ungroup()
data = read_csv("./all_races.csv")
sample_chart = data %>%
filter(name == "ulmaa")
ggplot(sample_chart, aes(x = game_num, y = wpm)) +
geom_jitter() +
geom_smooth(method = "lm", se = FALSE) +
xlab("Number of Races") +
ylab("Typing Speed (Words Per Minute)") +
ggtitle("Typing Improvement over Number of Races", subtitle = "Racer Ulmaa")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct() %>%
ungroup()
head(improvement) %>%
kable() %>%
kable_styling(position = "left", full_width = FALSE,
bootstrap_options = c("striped", "condensed"))
sample_chart %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red") +
xlab("Number of Races") +
ylab("Residuals (Words Per Minute)") +
ggtitle("Regression Model Residuals for Typing Speed Over Races", subtitle = "Racer Ulmaa")
ggplot(residuals, aes(x = res)) +
geom_density() +
geom_norm_density(mean(residuals), sd(residuals)) +
xlab("Residuals") +
ylab("Density") +
ggtitle("Residual Densities Compared to Normal Distribution", subtitle = "Racer Ulmaa")
residuals = sample_chart %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res)
ggplot(residuals, aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red") +
xlab("Number of Races") +
ylab("Residuals (Words Per Minute)") +
ggtitle("Regression Model Residuals for Typing Speed Over Races", subtitle = "Racer Ulmaa")
ggplot(residuals, aes(x = res)) +
geom_density() +
geom_norm_density(mean(residuals), sd(residuals)) +
xlab("Residuals") +
ylab("Density") +
ggtitle("Residual Densities Compared to Normal Distribution", subtitle = "Racer Ulmaa")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(kableExtra)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
ggplot(residuals, aes(x = res)) +
geom_density() +
geom_norm_density(mean(residuals), sd(residuals)) +
xlab("Residuals") +
ylab("Density") +
ggtitle("Residual Densities Compared to Normal Distribution", subtitle = "Racer Ulmaa")
ggplot(residuals, aes(x = res)) +
geom_density() +
geom_norm_density(mean(res), sd(res)) +
xlab("Residuals") +
ylab("Density") +
ggtitle("Residual Densities Compared to Normal Distribution", subtitle = "Racer Ulmaa")
ggplot(residuals, aes(x = res)) +
geom_density() +
geom_norm_density(mean(residuals$res), sd(residuals$res)) +
xlab("Residuals") +
ylab("Density") +
ggtitle("Residual Densities Compared to Normal Distribution", subtitle = "Racer Ulmaa")
