group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
data %>%
group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2] * game_num)
lm(x ~ y) * y
lm(x ~ y)$coefficients[2] * y
lm(x ~ y)$coefficients[2] * 10
data %>%
group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
data = read_csv("../draft/all_races.csv")
data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(slope = lm(wpm ~ game_num)$coefficients[2]) %>%
ggplot(aes(x = slope)) +
geom_violin()
ggplot(data, aes(y = slope)) +
geom_violin()
data = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
ggplot(data, aes(y = slope)) +
geom_violin()
View(data)
ggplot(data, aes(x = name, y = slope)) +
geom_violin()
ggplot(data, aes(x = slope)) +
geom_boxplot()
ggplot(data, aes(x = 1, y = slope)) +
geom_boxplot()
ggplot(data, aes(x = 1, y = slope)) +
geom_violin()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
lm(data$wpm ~ data$game_num)
x = c(1, 2, 3, 4, 5)
y = c(2, 4, 6, 8, 10)
lm(x ~ y)$coefficients[2] * 10
lm(x ~ y)
lm(x ~ y)$coefficients[1] + lm(x ~ y)$coefficients[2] * x
lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1
data = read_csv("../draft/all_races.csv")
data %>%
group_by(name) %>%
filter(min(game_num))
data %>%
group_by(name) %>%
summarize(min_game_num = min(game_num))
min_games = data %>%
group_by(name) %>%
summarize(min_game_num = min(game_num))
start_wpm = data %>%
group_by(name) %>%
filter(game_num %in% min_games)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num)
View(min_games)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num) %>%
select(racer, wpm)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num) %>%
select(name, wpm)
(lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
((lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)) / (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(slope = slope * game_num / (intercept))
View(slopes)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(games = max(game_num), intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(slope = slope * games / (intercept))
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept))
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("")
data = read_csv("../draft/all_races.csv")
# first_wpm = data %>%
#   group_by(name) %>%
#   mutate(min_game_num = min(game_num)) %>%
#   filter(game_num == min_game_num) %>%
#   select(name, wpm)
# start_wpm = data %>%
#   group_by(name) %>%
#   filter(game_num %in% min_games)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
data = read_csv("../draft/all_races.csv")
# first_wpm = data %>%
#   group_by(name) %>%
#   mutate(min_game_num = min(game_num)) %>%
#   filter(game_num == min_game_num) %>%
#   select(name, wpm)
# start_wpm = data %>%
#   group_by(name) %>%
#   filter(game_num %in% min_games)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank())
x = c(1, 2, 3, 4, 5)
y = c(2, 4, 6, 8, 10)
((lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)) / (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.label.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.labels.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer Users", subtitle = "2500 - 3000 races, ") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
t.test(slopes %>% pull(slope))
data = read_csv("../draft/all_races.csv")
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = max(game_num), imp = n * m / b - 1) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
data = read_csv("../draft/all_races.csv")
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = max(game_num), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(improvement)
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(improvement)
View(improvement)
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
head(improvement)
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(data)
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, 500 min texts, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
sample_chart %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
mutate(
res = wpm - (game_num * m + b)
) %>%
select(game_num, res) %>%
ggplot(aes(x = game_num, y = res)) +
geom_jitter() +
geom_hline(yintercept = 0, color = "red") +
xlab("Number of Races") +
ylab("Residuals (Words Per Minute)") +
ggtitle("Regression Model Residuals for Typing Speed Over Races", subtitle = "Racer Ulmaa")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
data = read_csv("./all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(
b = coef(lm(wpm ~ game_num))[1],
m = coef(lm(wpm ~ game_num))[2]
) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct() %>%
ungroup()
head(improvement)
summary2 = data %>%
summarize(
worst_race_wpm = min(wpm),
average_race_wpm = mean(wpm),
best_race_wpm = max(wpm),
worst_race_acc = min(accuracy, na.rm = TRUE),
average_race_acc = mean(accuracy, na.rm = TRUE),
best_race_acc = max(accuracy, na.rm = TRUE),
average_racers = mean(racers_num),
)
summary2
summary = improvement %>%
summarize(
total = n(),
min_races = min(n),
mean_races = mean(n),
max_races = max(n),
min_imp = min(imp),
mean_imp = mean(imp),
max_imp = max(imp)
)
summary
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col() +
geom_text(aes(label = mean_wpm), vjust = 1.5, colour = "white")
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col() +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white")
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm))
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col() +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded Words per minute")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm), count = n())
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col() +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
geom_text(aes(label = str_c("(",count,")")), vjust = 3.0, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded Words per minute")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm), count = n())
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col() +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
geom_text(aes(label = str_c("(",count,")")), vjust = 3.0, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded WPM with (total race count)")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm), count = n())
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col(fill = blue) +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
geom_text(aes(label = str_c("(",count,")")), vjust = 3.0, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded WPM with (total race count)")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm), count = n())
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col(fill = "blue") +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
geom_text(aes(label = str_c("(",count,")")), vjust = 3.0, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded WPM with (total race count)")
summary3 = data %>%
group_by(racers_num) %>%
summarize(mean_wpm = mean(wpm), count = n())
ggplot(summary3, aes(x = as.factor(racers_num), y = mean_wpm)) +
geom_col(fill = "darkblue") +
geom_text(aes(label = round(mean_wpm)), vjust = 1.5, colour = "white") +
geom_text(aes(label = str_c("(",count,")")), vjust = 3.0, colour = "white") +
xlab("Racers on Track") +
ylab("Average WPM") +
ggtitle("Typing Speeds based on Number of Racers Raced Against", subtitle="Rounded WPM with (total race count)")
?round
View(data)
gc()
