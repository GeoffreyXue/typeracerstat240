print(i)
}
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(httr)
library(rvest)
library(jsonlite)
library(lubridate)
store_races = function(id, races)
{
# Endpoint will feed in id and total races
path = "https://data.typeracer.com/games";
parameters = list(
playerId = str_c("tr:", id),
n = races
)
tryCatch(
{
request = GET(url = path, query = parameters)
# Convert request json to tibble, some renaming for clarity
# General data cleanup, removing uneeded columns and converting datetimes
races = as_tibble(fromJSON(content(request, 'text'))) %>%
rename(
accuracy = ac,
time = t,
game_num = gn,
racers_num = np,
points = pts
) %>%
select(everything(), -r, -sl, -tid) %>%
mutate(time = as_datetime(time))
# Write to csv in race_log folder with id
write_csv(races, str_c("race_log/", id, ".csv"))
},
error = function(e) {
# If encounters error with parsing, then sleep for 60 seconds and try again
print(str_c("error with ", id))
print(e)
Sys.sleep(60)
store_races(id, races)
}
)
return ( NULL )
}
combine_racer_data = function(id) {
data = read_csv(str_c("race_log/", id, ".csv"), show_col_types = FALSE)
data = data %>% add_column(name = id) %>% select(name, everything())
data
}
data = tibble()
names = read_csv("names.csv")
for (i in seq_len(nrow(names))) {
data = data %>% bind_rows(combine_racer_data(names$racer[i]))
}
names = read_csv("names.csv")
for (i in seq_len(nrow(names))) {
store_races(names$racer[i], names$races[i])
print(i)
}
combine_racer_data = function(id) {
data = read_csv(str_c("race_log/", id, ".csv"), show_col_types = FALSE)
data = data %>% add_column(name = id) %>% select(name, everything())
data
}
data = tibble()
names = read_csv("names.csv")
for (i in seq_len(nrow(names))) {
data = data %>% bind_rows(combine_racer_data(names$racer[i]))
}
head(data)
write_csv(data, "all_races.csv")
data %>% filter(game_num == 1)
# updates
update_racer = function(id)
{
path = "https://typeracerdata.com/import";
parameters = list(
username = id
)
request = GET(url = path, query = parameters)
}
store_races = function(id, races)
{
# Endpoint will feed in id and total races
path = "https://data.typeracer.com/games";
parameters = list(
playerId = str_c("tr:", id),
n = races
)
tryCatch(
{
request = GET(url = path, query = parameters)
# Convert request json to tibble, some renaming for clarity
# General data cleanup, removing uneeded columns and converting datetimes
races = as_tibble(fromJSON(content(request, 'text'))) %>%
rename(
accuracy = ac,
time = t,
game_num = gn,
racers_num = np,
points = pts
) %>%
select(everything(), -r, -sl, -tid) %>%
mutate(time = as_datetime(time))
# Write to csv in race_log folder with id
write_csv(races, str_c("race_log/", id, ".csv"))
},
error = function(e) {
# If encounters error with parsing, then sleep for 60 seconds and try again
print(str_c("error with ", id))
print(e)
Sys.sleep(60)
store_races(id, races)
}
)
return ( NULL )
}
names = read_csv("names.csv")
for (i in seq_len(nrow(names))) {
update_racer(names$racer[i])
print(i)
}
print("all racers logged")
for (i in seq_len(nrow(names))) {
store_races(names$racer[i], names$races[i])
print(i)
}
names = read_csv("names.csv")
for (i in seq_len(nrow(names))) {
store_races(names$racer[i], names$races[i])
print(i)
}
View(data)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
data = read_csv("../draft/all_races.csv")
data = read_csv("../draft/all_races.csv")
View(data)
data %>%
group_by(name) %>%
summarize(slope = abs(lm(wpm ~ game_num)$coefficients[2]))
data %>%
group_by(name) %>%
summarize(slope = abs(lm(wpm ~ game_num)))
lm(data$wpm ~ data$game_num)
?lm
lm(x ~ y)
x = c(1, 2, 3, 4, 5)
y = c(2, 4, 6, 8, 10)
lm(x ~ y)
lm(y ~ x)
lm(x ~ y)
data %>%
group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
data %>%
group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2] * game_num)
lm(x ~ y) * y
lm(x ~ y)$coefficients[2] * y
lm(x ~ y)$coefficients[2] * 10
data %>%
group_by(name) %>%
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
data = read_csv("../draft/all_races.csv")
data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(slope = lm(wpm ~ game_num)$coefficients[2]) %>%
ggplot(aes(x = slope)) +
geom_violin()
ggplot(data, aes(y = slope)) +
geom_violin()
data = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(slope = lm(wpm ~ game_num)$coefficients[2])
ggplot(data, aes(y = slope)) +
geom_violin()
View(data)
ggplot(data, aes(x = name, y = slope)) +
geom_violin()
ggplot(data, aes(x = slope)) +
geom_boxplot()
ggplot(data, aes(x = 1, y = slope)) +
geom_boxplot()
ggplot(data, aes(x = 1, y = slope)) +
geom_violin()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
lm(data$wpm ~ data$game_num)
x = c(1, 2, 3, 4, 5)
y = c(2, 4, 6, 8, 10)
lm(x ~ y)$coefficients[2] * 10
lm(x ~ y)
lm(x ~ y)$coefficients[1] + lm(x ~ y)$coefficients[2] * x
lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1
data = read_csv("../draft/all_races.csv")
data %>%
group_by(name) %>%
filter(min(game_num))
data %>%
group_by(name) %>%
summarize(min_game_num = min(game_num))
min_games = data %>%
group_by(name) %>%
summarize(min_game_num = min(game_num))
start_wpm = data %>%
group_by(name) %>%
filter(game_num %in% min_games)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num)
View(min_games)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num) %>%
select(racer, wpm)
min_games = data %>%
group_by(name) %>%
mutate(min_game_num = min(game_num)) %>%
filter(game_num == min_game_num) %>%
select(name, wpm)
(lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
((lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)) / (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(slope = slope * game_num / (intercept))
View(slopes)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
summarize(games = max(game_num), intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(slope = slope * games / (intercept))
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept))
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
ggplot(data, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("")
data = read_csv("../draft/all_races.csv")
# first_wpm = data %>%
#   group_by(name) %>%
#   mutate(min_game_num = min(game_num)) %>%
#   filter(game_num == min_game_num) %>%
#   select(name, wpm)
# start_wpm = data %>%
#   group_by(name) %>%
#   filter(game_num %in% min_games)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
data = read_csv("../draft/all_races.csv")
# first_wpm = data %>%
#   group_by(name) %>%
#   mutate(min_game_num = min(game_num)) %>%
#   filter(game_num == min_game_num) %>%
#   select(name, wpm)
# start_wpm = data %>%
#   group_by(name) %>%
#   filter(game_num %in% min_games)
slopes = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(intercept = lm(wpm ~ game_num)$coefficients[1], slope = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(games = max(game_num), slope = slope * games / (intercept)) %>%
distinct()
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank())
x = c(1, 2, 3, 4, 5)
y = c(2, 4, 6, 8, 10)
((lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 5) - (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)) / (lm(y ~ x)$coefficients[1] + lm(y ~ x)$coefficients[2] * 1)
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.label.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.labels.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer users", subtitle = "2500 - 3000 races") +
ylab("Improvement (%)") +
xlab("") +
theme(axis.title.x = element_blank(), axis.ticks.x = element_blank() )
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer Users", subtitle = "2500 - 3000 races, ") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(slopes, aes(x = 0, y = slope)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
t.test(slopes %>% pull(slope))
data = read_csv("../draft/all_races.csv")
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = max(game_num), imp = n * m / b - 1) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
data = read_csv("../draft/all_races.csv")
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the slope column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = max(game_num), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
improvement = data %>%
group_by(name) %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(improvement)
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(improvement)
View(improvement)
data = read_csv("../draft/all_races.csv")
improvement = data %>%
# lm y ~ x will produce summary table of intercept and slope
# We grab the slope of game_num to wpm and store in the imp column
group_by(name) %>%
mutate(b = lm(wpm ~ game_num)$coefficients[1], m = lm(wpm ~ game_num)$coefficients[2]) %>%
group_by(name) %>%
summarize(n = n(), imp = n * m / b) %>%
distinct()
head(improvement)
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
View(data)
ggplot(improvement, aes(x = 0, y = imp * 100)) +
geom_violin() +
geom_jitter() +
ggtitle("Estimated Word Per Minute Improvement for Moderate Typeracer Users", subtitle = "2500 - 3000 races, 500 min texts, relative difference between estimated end and start wpm") +
ylab("Improvement (%)") +
xlab("") +
theme(
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x = element_blank())
