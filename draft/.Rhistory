rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
rbinom(6, n, p)
sum(rbinom(6000, n, p) == 6)
sum(rbinom(6000, n, p) == 5)
sum(rbinom(6000, n, p) == 5)
sum(rbinom(6000, n, p) == 5)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(scales)
library(lubridate)
library(XML) #For reading in HTML files
## Note: this code assumes viridis.R is two steps up the file directory tree in a `scripts` folder
source("../../scripts/viridis.R")
This R Markdown document includes contributions by Professor Jessi Kehe.
\renewcommand{\prob}{\mathsf{P}}
\newcommand{\E}{\mathsf{E}}
\newcommand{\Var}{\mathsf{Var}}
### Setup details
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning = FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(scales)
source("../../scripts/viridis.R")
source("../../scripts/ggprob.R")
This R Markdown document includes contributions by Professor Jessi Kehe.
\renewcommand{\prob}{\mathsf{P}}
\newcommand{\E}{\mathsf{E}}
\newcommand{\Var}{\mathsf{Var}}
bm_orig = read_table("../../data/TIM.txt",
col_types = cols(.default = col_double()))
bm_orig = read_table("../../data/lecture29/TIM.txt",
col_types = cols(.default = col_double()))
bm = bm_orig %>%
filter(!is.na(`K40-Fin`)) %>%
filter(Year < 2013) %>%
arrange(Year, BibNum) %>%
select(-starts_with("Start"), -HalfMar, -Age2014) %>%
mutate(Sex = case_when(
Gender1F2M == 1 ~ "female",
Gender1F2M == 2 ~ "male")) %>%
mutate(Time = pmap_dbl(select(., starts_with("K")), sum)) %>%
mutate(age1 = case_when(
Age < 35 ~ 18,
Age >= 80 ~ 80,
TRUE ~ floor(Age/5)*5),
age2 = case_when(
Age < 35 ~ 34,
TRUE ~ age1 + 4),
Age_Range = case_when(
age1 == 80 ~ "80 and older",
TRUE ~ str_c(age1,"-",age2))) %>%
select(-Gender1F2M, -age1, -age2) %>%
relocate(BibNum, Year, Sex, Age, Age_Range, Time)
View(bm_orig)
View(bm)
bm %>%
count(Year, Sex, Age_Range) %>%
pivot_wider(names_from = Age_Range,
values_from = n)
bm %>%
filter(Year == 2010) %>%
ggplot(aes(x = Sex, fill = Sex)) +
geom_bar() +
xlab("") +
ylab("# of Finishers") +
ggtitle("2010 Boston Marathon Finishers") +
facet_wrap(~Age_Range)
bm %>%
filter(Year == 2011) %>%
ggplot(aes(x = Sex, fill = Sex)) +
geom_bar() +
xlab("") +
ylab("# of Finishers") +
ggtitle("2011 Boston Marathon Finishers") +
facet_wrap(~Age_Range)
prob1 = bm %>%
filter(Sex == "female",
Age_Range == "18-34",
Year == 2010)
prob1_sum = prob1 %>%
summarize(n = n(),
mean = mean(Time),
sd = sd(Time))
prob1_sum
ggplot(prob1, aes(x = Time)) +
geom_density(fill = "lightpink", color = "black") +
geom_hline(yintercept = 0) +
xlab("Finishing Time") +
ggtitle("2010 Boston Marathon",
subtitle = "Women aged 18-34") +
theme_minimal()
B = 50000
x = prob1 %>% pull(Time)
set.seed(20211115)
sample_means = tibble(
xbar = map_dbl(1:B, ~{
return( mean(sample(x, replace = TRUE)) )
}))
sim1_sum = sample_means %>%
summarize(n = n(),
mean = mean(xbar),
sd = sd(xbar))
sim1_sum
ggplot(sample_means, aes(x = xbar)) +
geom_density(fill = "lightpink", color = "black") +
geom_norm_density(sim1_sum$mean, sim1_sum$sd) +
geom_hline(yintercept = 0) +
xlab("Finishing Time Sample Means") +
ggtitle("2010 Boston Marathon, Women aged 18-34",
subtitle = "Sampling Distribution of xbar, n = 3557") +
theme_minimal()
B = 50000
n = 50
x = prob1 %>% pull(Time)
set.seed(20211115)
sample_means = tibble(
xbar = map_dbl(1:B, ~{
return( mean(sample(x, size = n, replace = TRUE)) )
}))
sim2_sum = sample_means %>%
summarize(n = n(),
mean = mean(xbar),
sd = sd(xbar))
sim2_sum
ggplot(sample_means, aes(x = xbar)) +
geom_density(fill = "lightpink", color = "black") +
geom_norm_density(sim2_sum$mean, sim2_sum$sd) +
geom_hline(yintercept = 0) +
xlab("Finishing Time Sample Means") +
ggtitle("2010 Boston Marathon, Women aged 18-34",
subtitle = "Sampling Distribution of xbar, n = 50") +
theme_minimal()
z = qnorm(0.975)
ci = prob1_sum$mean + c(-1,1)*z*sim1_sum$sd
round(ci,3)
## Simulation SE
sim1_sum$sd
## Formula
prob1_sum$sd / sqrt(prob1_sum$n)
```{r}
t.test(x)
x
capture_sim = capture_sim %>%
mutate(capture = low < mu & mu < high) %>%
mutate(index = row_number()) %>%
relocate(index)
B = 50000
n = 50
t_mult = qt(0.975, n-1)
x = prob1$Time
mu = mean(x)
sigma = sd(x) * sqrt(3556/3557)
mu
sigma
capture_base = vector("list", B)
capture_sim = map_dfr(capture_base, ~{
samp = sample(x, size = n, replace = TRUE)
out = tibble(xbar = mean(samp),
sd = sd(samp),
se = sd/sqrt(n),
low = xbar - t_mult*se,
high = xbar + t_mult*se)
return ( out )
})
capture_sim = capture_sim %>%
mutate(capture = low < mu & mu < high) %>%
mutate(index = row_number()) %>%
relocate(index)
## new sample
n = 50
new_x = sample(x, size = n)
new_x_mean = mean(new_x)
new_x_sd = sd(new_x)
new_x_se = new_x_sd / sqrt(n)
t_mult = qt(0.975, n-1)
new_x_mean
new_x_sd
new_x_se
t_mult
new_ci = new_x_mean + c(-1,1) * t_mult * new_x_se
new_ci
## compare to t.test
t.test(new_x)
B = 50000
n = 50
t_mult = qt(0.975, n-1)
x = prob1$Time
mu = mean(x)
sigma = sd(x) * sqrt(3556/3557)
mu
sigma
capture_base = vector("list", B)
capture_sim = map_dfr(capture_base, ~{
samp = sample(x, size = n, replace = TRUE)
out = tibble(xbar = mean(samp),
sd = sd(samp),
se = sd/sqrt(n),
low = xbar - t_mult*se,
high = xbar + t_mult*se)
return ( out )
})
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(httr)
library(XML) # For reading in HTML files
races_min = 2500
races_max = 3000
texts_min = 1000
racers = 100
setwd("~/Projects/STAT_240/project/draft")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE,
cache=TRUE, autodep=TRUE, cache.comments=FALSE)
library(tidyverse)
library(httr)
library(XML) # For reading in HTML files
races_min = 2500
races_max = 3000
texts_min = 1000
racers = 100
path = "http://typeracerdata.com/leaders";
parameters = list(
min_races = races_min,
min_texts = texts_min,
rank_start = 0,
# Arbitrary large number to pull all data. If rank_end is not specified,
# the amount returned defaults to 50. There are only ~16k users logged
# in typeracerdata, so this number guarantees full retrieval
rank_end = 20000,
sort = "races"
)
request = GET(url = path, query = parameters)
request$status_code
content(request, as = "html")
content(request, as = "text", encoding = "UTF-8")
response
request
View(request)
readHTMLTable(request)
library(rvest)
#
# readHTMLTable(request)
request = read_html(request)
View(request)
request
request = GET(url = path, query = parameters)
test = request %>% html_table(fill = TRUE)
read_html(request)
read_html(request)
test = request %>% html_table(fill = TRUE)
test = read_html(request) %>% html_table(fill = TRUE)
View(test)
test = read_html(request) %>% html_table(fill = TRUE)[[1]]
test = read_html(request) %>% html_table(fill = TRUE)
test = read_html(request) %>% html_table(fill = TRUE)
test = test[[1]]
View(test)
request = GET(url = path, query = parameters)
request$status_code
table = read_html(request) %>% html_table(fill = TRUE)
table = table[[1]]
table %>%
select(Racer, Races, Texts) %>%
# Some of these are redundant
filter(Races < races_max & Races > races_min & Texts > texts_min)
request = GET(url = path, query = parameters)
request$status_code
table = read_html(request) %>% html_table(fill = TRUE)
table = table[[1]]
head(table)
table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
races = parse_number(races),
texts = parse_number(texts)
)
head(table)
View(table)
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
races = parse_number(races),
texts = parse_number(texts)
)
head(table)
table %>%
# Some of these are redundant
filter(Races < races_max & Races > races_min & Texts > texts_min)
table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min)
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min)
View(table)
randperm(50)
nrow(table)
random = runif(racers, 1, nrow(table))
random = sample(racers, 1, nrow(table))
random = sample(1:nrow(table), racers)
random = sample(1:nrow(table), racers, replace = FALSE)
table[random]
table[1]
table$1
?slice
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min) %>%
select(racer, races) %>%
slice_sample(n = racers)
View(table)
test = "spooky (cheffray)";
str_extract(test, "(.*)$")
str_replace(test, ".*\\((.*)\\)$")
str_replace(test, ".*\\((.*)\\)$", "$1")
str_replace(test, ".*\\((.*)\\)$", repalcement=" $1")
str_replace(test, ".*\\((.*)\\)$", repalcement="$1")
str_replace(test, ".*\\((.*)\\)$", replacement="$1")
str_replace(test, ".*\\((.*)\\)$", replacement=" $1")
str_extract(test, "\\(.*\\)$")
str_extract(test, "\\(.*\\)$") %>% str_sub(1, -1)
str_extract(test, "\\(.*\\)$") %>% str_sub(2, -1)
str_extract(test, "\\(.*\\)$") %>% str_sub(2, -2)
request = GET(url = path, query = parameters)
request$status_code
table = read_html(request) %>% html_table(fill = TRUE)
table = table[[1]]
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
# The name returns both a racer's true name and a nickname
# The true name is in the end of the string surrounded by parentheses
racer = str_extract(racer, "\\(.*\\)$") %>% str_sub(2, -2)
races = parse_number(races),
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
# The name returns both a racer's true name and a nickname
# The true name is in the end of the string surrounded by parentheses
racer = str_extract(racer, "\\(.*\\)$") %>% str_sub(2, -2),
races = parse_number(races),
texts = parse_number(texts)
)
head(table)
table = read_html(request) %>% html_table(fill = TRUE)
table = read_html(request) %>% html_table(fill = TRUE)
table = table[[1]]
head(table)
View(table)
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
# The name returns both a racer's true name and a nickname
# The true name is in the end of the string surrounded by parentheses
# racer = str_extract(racer, "\\(.*\\)$") %>% str_sub(2, -2),
races = parse_number(races),
texts = parse_number(texts)
)
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min) %>%
select(racer, races) %>%
slice_sample(n = racers)
View(table)
str_extract(test, "\\(.*\\)$") %>% str_sub(2, -2)str
str_extract(test, "\\(.*\\)$") %>% str_sub(2, -2)
cat(write_csv(head(mtcars), ""))
cat(write_csv(head(mtcars), "test.csv"))
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min) %>%
select(racer, races) %>%
slice_sample(n = racers) %>%
write_csv("names.csv")
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
# The name returns both a racer's true name and a nickname
# The true name is in the end of the string surrounded by parentheses
# racer = str_extract(racer, "\\(.*\\)$") %>% str_sub(2, -2),
races = parse_number(races),
texts = parse_number(texts)
)
table = read_html(request) %>% html_table(fill = TRUE)
table = read_html(request) %>% html_table(fill = TRUE)
table = table[[1]]
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
# The name returns both a racer's true name and a nickname
# The true name is in the end of the string surrounded by parentheses
# racer = str_extract(racer, "\\(.*\\)$") %>% str_sub(2, -2),
races = parse_number(races),
texts = parse_number(texts)
)
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min) %>%
select(racer, races) %>%
slice_sample(n = racers) %>%
write_csv("names.csv")
table = read_html(request)
table %>%
html_nodes(xpath = "\\td\a") %>%
html_attr("href")
request_html = htmlParse(content(request, as = "text"))
request_html = htmlParse(read_html(request))
table %>%
html_nodes(xpath = "//td/a") %>%
html_attr("href")
names = table %>%
html_nodes(xpath = "//td/a") %>%
html_attr("href") %>%
str_extract("\\=.*$") %>%
str_sub(2)
request = GET(url = path, query = parameters)
request$status_code
table_html = read_html(request)
# Getting names from href tags
names = table_html %>%
html_nodes(xpath = "//td/a") %>%
html_attr("href") %>%
str_extract("\\=.*$") %>%
str_sub(2)
# Parsing rest of the table
table = html_table(fill = TRUE)
request = GET(url = path, query = parameters)
request$status_code
table_html = read_html(request)
# Getting names from href tags
names = table_html %>%
html_nodes(xpath = "//td/a") %>%
html_attr("href") %>%
str_extract("\\=.*$") %>%
str_sub(2)
# Parsing rest of the table
table = table %>% html_table(fill = TRUE)
table = table[[1]]
table = table %>%
select(Racer, Races, Texts) %>%
rename(
racer = Racer,
races = Races,
texts = Texts
) %>%
mutate(
racer = names,
races = parse_number(races),
texts = parse_number(texts)
)
head(table)
View(table)
table = table %>%
# Some of these are redundant
filter(races < races_max & races > races_min & texts > texts_min) %>%
select(racer, races) %>%
slice_sample(n = racers)
write_csv(table, "names.csv")
head(names)
